@* You can see the teacher's version in his 2019-jan-in class git repository *@

<!DOCTYPE html>
<html>
<head>
    <title></title>
    <style rel="stylesheet" media="all">
        form {
            display: grid;
            grid-template-columns: 200px 300px;
            grid-row-gap: 5px;
            grid-column-gap: 5px;
        }

            form > img {
                grid-column: 2;
            }

        fieldset {
            border: none;
            padding-left: 0;
            margin-left: 0;
            grid-column: 2;
        }
    </style>
</head>
<body>
    <h1>Manage Category</h1>
    @{
        //variables for category details (with defaults)
        //nameof returns the string catId
        // ?? is the null coalesing operator (it means that if the thing on the left is null then use the thing on the right of the ??
        string catId = Request[nameof(catId)] ?? string.Empty;
        string catName = Request[nameof(catName)] ?? string.Empty;
        string catDescription = Request[nameof(catDescription)] ?? string.Empty;
        string mimeType = string.Empty;
        byte[] catPicBytes = null;
        string submitType = Request[nameof(submitType)] ?? string.Empty;
        //That's for capturing the file of the posted image (when a new category is added or an image is updated)
        HttpPostedFileBase catPic = null;
        //opens a connection to the database
        var westWindDatabase = WebMatrix.Data.Database.Open("WestWindDb");

        if (IsPost)
        {
            //See if an image was included in the posted form data
            if (Request.Files.Count > 0)
            {
                catPic = Request.Files[0];
                mimeType = catPic.ContentType;
                catPicBytes = new byte[catPic.ContentLength];
                catPic.InputStream.Read(catPicBytes, 0, catPic.ContentLength);
            }
            switch (submitType)
            {
                case "Add":
                    string insertStatement = "insert into categories(CategoryName, Description, Picture, PictureMimeType) values (@0, @1, @2, @3)";
                    westWindDatabase.Execute(insertStatement, catName, catDescription, catPicBytes, mimeType);
                    //Inserting gets the database to make a CategoryID for the new row
                    // so we want to grab that new identity value.
                    //SCOPE_IDENTITY returns the last identity value inserted into an identity column in the same scope
                    var newId = westWindDatabase.QueryValue("select SCOPE_IDENTITY()");
                    break;
                case "Update":
                    string updateStatement;
                    int rowsAffected;
                    // If/else for if there was an uploaded picture or not
                    if (catPicBytes != null)
                    {
                        updateStatement = "UPDATE Categories SET CategoryName = @0, Description = @1, Picture = @2, PictureMimeType = @3 WHERE CategoryID = @4";
                        //Execute gives back the number of rows affected (and also executes the database statements)
                        rowsAffected = westWindDatabase.Execute(updateStatement, catName, catDescription, catPicBytes, mimeType, catId);
                    }
                    else
                    {
                        updateStatement = "UPDATE Categories SET CategoryName = @0, Description = @1 WHERE CategoryID = @2";
                        rowsAffected = westWindDatabase.Execute(updateStatement, catName, catDescription, catId);
                    }
                    // (if no rows were affected the update didn't work)
                    if (rowsAffected == 0)
                    {
                        <div>Update failed. Try again or cancel.</div>
                    }
                    else
                    {
                        <div>Update successful.</div>
                    }
                    break;
                case "Delete":
                    string deleteStatement;
                    int rowCount;
                    deleteStatement = "DELETE Categories WHERE CategoryID = @0";
                    //row count is the same as rows effected (to check if the delete worked)
                    rowCount = westWindDatabase.Execute(deleteStatement, catId);
                    if (rowCount == 0)
                    {
                        <div>Delete failed. Try again or cancel.</div>
                    }
                    else
                    {
                        <div>Delete successful.</div>
                        catId = string.Empty;
                        catName = string.Empty;
                        catDescription = string.Empty;
                        catPicBytes = null;
                        mimeType = string.Empty;
                    }
                    break;
                case "Cancel":
                    Response.Redirect("~", true); //takes you back to the previous web page
                    break;
                default:
                    <div>WTF == "What's that for?</div>
                    break;

            }
        }
        else
        {
            //READ the data to diaplsy
            // @0 is the first placeholder position
            // NEVER, EVER build the string using string interpolataion
            //ALWAYS use placeholders to pass data to the database
            string query = "select CategoryID, CategoryName, Description, Picture, PictureMimeType from Categories where categoryID = @0";
            //.QuerySingle will return an object representing the row (.Query returns multiple rows)
            //or the value null if nothing was found
            var result = westWindDatabase.QuerySingle(query, catId);

            if (result == null)
            {
                <div>No such category found for ID @catId</div>
            }
            else
            {
                catName = result.CategoryName;
                catDescription = result.Description;
                catPicBytes = result.Picture;
                mimeType = result.PictureMimeType;
            }
        }//end of else
    } @* end of razor *@

    @* When your form will have an <input type="file" />,
        then you will need to have the enctype (encoding type) attribut on your form element*@
    <form method="post" enctype="multipart/form-data">
        <label>Name</label>
        <input type="text" name="@nameof(catName)" placeholder="Category Name" value="@catName" />

        <label>Descriptions</label>
        <input type="text" name="@nameof(catDescription)" placeholder="Description" value="@catDescription" />

        <label>Picture</label>
        <input type="file" name="catPic" />
        @if (catPicBytes != null)
        {
            string base64String = Convert.ToBase64String(catPicBytes);
            string imageSrc = $"data:{mimeType};base64,{base64String}";
            <text>
                <img src="@imageSrc" width="75" />
            </text>
        }

        <fieldset class="buttons">
            @if (string.IsNullOrWhiteSpace(catId))
            {
                <input type="submit" name="@nameof(submitType)" value="Add" />
            }
            else
            {
                <input type="submit" name="@nameof(submitType)" value="Update" />
                //onclick is javaScript fail safe, creates a popup
                <input name="submitType" type="submit" value="Delete" onclick="return confirm('Are you sure you want to permanently remove this category?')" />
            }
            <input type="submit" name="submitType" value="Cancel" />
            <input type="hidden" name="@nameof(catId)" value="@catId" />
        </fieldset>
    </form>
</body>
</html>
